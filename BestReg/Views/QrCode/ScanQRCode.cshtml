@{
    ViewData["Title"] = "Scan QR Code";
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h2 class="card-title text-center">Scan QR Code</h2>

                    <!-- Container for video stream -->
                    <div style="position: relative; width: 100%; padding-top: 56.25%; background: #000;">
                        <video id="video" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" autoplay></video>
                    </div>

                    <!-- Display scanned QR code data -->
                    <div id="qr-reader-results" class="mt-3 text-center"></div>

                    <!-- Hidden form to submit the scanned QR code data -->
                    <form id="checkInForm" method="post">
                        @Html.AntiForgeryToken()
                        <input type="hidden" id="qrCodeData" name="qrCodeData" />
                        <input type="hidden" id="scanType" name="scanType" value="@ViewBag.ScanType" />
                        <input type="hidden" id="role" name="role" value="@ViewBag.Role" />
                        <button type="submit" class="w-100 btn btn-lg btn-primary mt-3" id="checkInBtn" style="display:none;">
                            <span id="checkInText">Submit</span>
                            <span id="loader" class="spinner-border spinner-border-sm" role="status" aria-hidden="true" style="display:none;"></span>
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Include the jsQR library -->
    <script src="https://cdn.jsdelivr.net/npm/jsqr/dist/jsQR.js"></script>
    <script>
        const video = document.getElementById("video");
        const canvas = document.createElement('canvas');
        const context = canvas.getContext("2d");
        const qrResult = document.getElementById("qr-reader-results");
        const qrCodeDataInput = document.getElementById("qrCodeData");
        const checkInBtn = document.getElementById("checkInBtn");
        let formSubmitted = false; // Flag to prevent multiple form submissions

        // Access the user's camera
        navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" } })
            .then(function (stream) {
                video.srcObject = stream;
                video.setAttribute("playsinline", true); // iOS Safari requires this attribute
                video.play();
                requestAnimationFrame(tick); // Call tick() to start reading QR codes
            })
            .catch(function (err) {
                console.error("Error accessing the camera: ", err);
                qrResult.innerHTML = `<span class="text-danger">Failed to access the camera. Please check camera permissions.</span>`;
            });

        // Continuously check for a QR code in the video feed
        function tick() {
            if (video.readyState === video.HAVE_ENOUGH_DATA) {
                canvas.height = video.videoHeight;
                canvas.width = video.videoWidth;
                context.drawImage(video, 0, 0, canvas.width, canvas.height);

                const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
                const code = jsQR(imageData.data, imageData.width, imageData.height);

                if (code && !formSubmitted) {
                    qrResult.innerHTML = `<span class="text-success">QR Code detected: ${code.data}</span>`;
                    qrCodeDataInput.value = code.data; // Set QR code data into hidden input field
                    checkInBtn.style.display = 'block'; // Show the Check In button when QR code is detected
                    formSubmitted = true; // Set flag to prevent multiple submissions
                }
            }
            requestAnimationFrame(tick); // Continuously call tick()
        }

        // Optional: Reset the form submission flag when the form is reset or user interaction
        document.getElementById("checkInForm").addEventListener("reset", () => formSubmitted = false);

        // Dynamically set form action based on role and scan type
        document.addEventListener("DOMContentLoaded", function () {
            const form = document.getElementById("checkInForm");
            const role = document.getElementById("role").value;
            const scanType = document.getElementById("scanType").value;

            let action = "";
            let controller = "";

            if (role === "BusDriver") {
                controller = "BusDriver";
                switch (scanType) {
                    case "BusCheckInHome":
                        action = "BusCheckInHome";
                        break;
                    case "BusCheckOutSchool":
                        action = "BusCheckOutSchool";
                        break;
                    case "BusCheckInSchool":
                        action = "BusCheckInSchool";
                        break;
                    case "BusCheckOutHome":
                        action = "BusCheckOutHome";
                        break;
                    default:
                        console.error("Unknown scanType for BusDriver");
                }
            } else if (role === "SchoolAuthority") {
                controller = "SchoolAuthority";
                switch (scanType) {
                    case "SchoolCheckIn":
                        action = "SchoolCheckIn";
                        break;
                    case "SchoolCheckOut":
                        action = "SchoolCheckOut";
                        break;
                    default:
                        console.error("Unknown scanType for SchoolAuthority");
                }
            }

            // Set form action URL dynamically
            if (controller && action) {
                form.setAttribute("action", `/${controller}/${action}`);
            } else {
                console.error("Form action could not be set.");
            }
        });
    </script>
}
